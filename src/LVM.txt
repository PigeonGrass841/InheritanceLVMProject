Logical Volume Manager

Logical Volume Manager (LVM) is a tool used to manage various hard drives on a server to allow for redundancy, abstraction, and data protection.

Your task is to create, design and implement classes using Inheritance that will contain all of the information about pieces of an LVM system.


Each LVM system is comprised of the following four items:
- Physical hard drives
- Physical volumes
- Logical volumes
- Volume Groups

The lowest level of any logical volume system is a physical hard drive. Each physical hard drive has a name and size (in GB). In the above picture, one physical hard drive is "SDA." Ignore the 1 for each drive.

The next level is the physical volume. Each physical volume (PV) has only one associated physical hard drive, and a user provided name. Each PV also has a UUID (Universally Unique Identifier) that is generated whenever a PV is created. A PV can only be created with an associated hard drive. PVs can also be added to Volume Groups (outlined below). A physical hard drive can only belong to one physical volume.

Volume Groups (VGs) also have a UUID and a user provided name. VGs consist of a list of physical volumes, and a list of Logical Volumes. You should be able to get the size of a VG by adding up all of its associated PVs. You should also be able to compute how much free space is left on a VG by looking at how big each Logical Volume is and subtracting that from the total PV space.

Logical Volumes are the highest level of LVM, which are used to create file structures on top. Each Logical Volume (LV) has a size, UUID, user provided name, and an associated volume group. A logical volume CANNOT exist without an associated volume group. You should not be able to create a logical volume in a volume group that does not have enough available space.

A note on UUIDs:

Java has built in capability to create UUIDs. Read about UUIDs here:
https://en.wikipedia.org/wiki/Universally_unique_identifier

import java.util.UUID;

public class UUIDGenerator {
    public static void main(String[] args) {
        UUID u = UUID.randomUUID();
        System.out.println(u.toString());
    }
}

Requirements:

You should build all of the classes using Inheritance where appropriate that hold all of the following information:

Name and size of each hard drive
Name, UUID, and associated hard drive of each PV
You should also be able to get the size of a PV by checking its hard drive
Name, UUID, list of PVs, and a list of LVs for a Volume Group
You should also be able to get the total VG size and the total free space
Name, UUID, size, and associated VG for a specific LV


Your program's main Runner class should provide an command-line interface that allows users to:
- Install hard drives
- List drives
- Create physical volumes
- List physical volumes
- Create and extend volume groups
- List volume groups
- Create and extend logical volumes
- List logical volumes

If the user types the command exit, the program should end.

Challenge: Each time the program ends, you should save all the information the user has entered (all drives, physical volumes, volume groups, etc). When the program restarts, load the data back up so they can continue where they left off. HINT: You can write to a file and read from a file to do this. The file format is up to you.
Here are samples of the commands the user can type when your program runs.

install-drive [drive_name] [size]
install-drive sda 100G

This command will install a new hard drive with the name "sda" of size 100G

You should not allow the user to install a drive that is already installed.
list-drives

This command will list all the drives that have been installed and output it in this format:

sda [100G]
sdb [500G]
sdc [50G]
pvcreate [pv_name] [drive_name]
pvcreate pv1 sda

This command will create a new physical volume named "pv1" with the size of the given drive. You should not allow the user to create a physical volume with a drive that has already been used as part of another physical volume.

This should report an error if the drive doesn't exist or if the drive is associated with an already created PV. It should also report an error if the PV name already exists.
pvlist

This command will list all of the information about physical volumes (sorted by volume group) in this format:

pv1:[100G] [vg1] [uuid]

This denotes that pv1 is 100G and part of Volume Group vg1. If the PV is not part of a volume group yet, do not display the VG information.
vgcreate [vg_name] [pv_name]
vgcreate vg1 pv1

This command will create a new volume group named "vg1" with the physical volume "pv1"

This should report an error if the pv specified doesn't exist or is part of another VG. It should also report an error if the VG name already exists.
vgextend [vg_name] [pv_name]
vgextend vg1 pv2

This command will add physical volume "pv2" to "vg1"

This should report an error if the vg or pv specified doesn't exist or if the PV is part of another VG.
vglist

This command will list information about all the VGs in this format:

vg1: total:[300G] available:[120G] [pv1,pv2] [uuid]

This means vg1 has a total of 300G, with 120G available and contains the PVs pv1 and pv2.
lvcreate [lv_name] [size] [vg_name]
lvcreate lv1 50G vg1

This command will create an LV named "lv1" with the size of 50G inside the volume group "vg1"

This should only allow you to do this if there is enough space in the VG and should report an error if the vg name doesn't exist or doesn't have enough space. It should also report an error if the LV name already exists.
lvlist
This command should list the information about all logical volumes (sorted by volume group) created in this format:

lv1: [50G] [vg1] [uuid]
lv2: [100G] [vg2] [uuid]
lv3: [65G] [vg2] [uuid]


All commands should provide feedback to the user (did it fail? Why? Did it succeed? Print messages detailing what happened). Here is an example of a session a user can have with your program (text in blue is what the user is typing):

Welcome to the LVM system! Enter your commands:

cmd# install-drive sda 100G
Drive sda installed

cmd# install-drive sdb 500G
Drive sdb installed

cmd# list-drives
sda [100G]
sdb [500G]

cmd# pvcreate pv1 sda
pv1 created

cmd# vgcreate vg1 pv1
vg1 created

cmd# vglist
vg1: total:[100G] available:[100G] [pv1] [123e4567-e89b-12d3-a456-426614174000]

cmd# exit
Saving data. Good-bye!
Add a github link to this assignment for submission. Along with your source code, you should have a text file in your project that outlines each of your classes and how they will be related to each other. The format of this file is up to you.


Logical Volume Manager Project Rubric
Worth 50 major assessment points (due by 3/28)


Task Number/Description
Points
Design document showing class relationships, methods, and instance variables
10
Class implementation using Inheritance for hard drives, physical volumes, volume groups and logical volumes
20
Runner class implementing all commands listed above
18
Challenge: When your program exits, save all the user data and load this upon restart of the program. This will allow users to continue to build their LVM system and not have to recreate it every time.
2